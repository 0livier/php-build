#!/bin/bash
#/ php-build, Builds PHP with recipes.
#/
#/ Usage: php-build [--definitions] [<definition>] [<prefix>]
#/
#/ Arguments:
#/   definition:    What release should be used, as well as release-specific
#/                  configuration.
#/   prefix:        All built Executables, Configs and Libs are placed in this
#/                  directory. It's created if it doesn't exist.
#/
#/ Options:
#/   --definitions: Lists all available definitions
#/   --ini|i:       Specifies which php.ini-<environment> from the
#/                  source distribution is used as default php.ini
#/

set -e

CONFIGURE_OPTIONS="--without-pear \
--with-gd \
--with-jpeg-dir=/usr \
--with-png-dir=/usr \
--with-vpx-dir=/usr \
--with-freetype-dir=/usr \
--with-t1lib=/usr \
--enable-gd-native-ttf \
--enable-exif \
--with-zlib \
--with-zlib-dir=/usr \
--with-gettext \
--with-kerberos \
--with-imap-ssl \
--with-mcrypt=/usr \
--with-pdo-sqlite \
--enable-soap \
--enable-xmlreader \
--with-xsl \
--enable-ftp \
--enable-cgi \
--with-curl=/usr \
--with-tidy \
--with-xmlrpc \
--enable-sysvsem \
--enable-sysvshm \
--enable-shmop \
--with-mysql=mysqlnd \
--with-mysqli=mysqlnd \
--with-pdo-mysql=mysqlnd \
--with-readline"

PHP_BUILD_ROOT=$(readlink -f "$(dirname $0)/..")
PHP_DEFAULT_INI=

if [ "$1" = "-i" ] || [ "$1" = "--ini" ]; then
    PHP_DEFAULT_INI="php.ini-$2"
    shift
    shift
fi

DEFINITION=$1
PREFIX=$2

E_DEFINITION_NOT_FOUND=127

function display_usage {
    grep '^#/' <"$0" | cut -c4- >&2
}

function init {
    if [ ! -d "$PHP_BUILD_ROOT/packages" ]; then
        mkdir "$PHP_BUILD_ROOT/packages"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/source" ]; then
        mkdir "$PHP_BUILD_ROOT/source"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/tmp" ]; then
        mkdir "$PHP_BUILD_ROOT/tmp"
    fi

    if [ ! -d "$PHP_BUILD_ROOT/plugins" ]; then
        mkdir "$PHP_BUILD_ROOT/plugins"
    fi
}

function download {
    local url=$1
    local package_file="$PHP_BUILD_ROOT/packages/$(basename $url)"
    local temp_package="$PHP_BUILD_ROOT/tmp/$(basename $url)"

    if [ -f "$temp_package" ]; then
        rm "$temp_package"
    fi

    if [ ! -f "$package_file" ]; then
        wget -qP "$PHP_BUILD_ROOT/tmp" "$url" > /dev/null
        cp "$temp_package" "$PHP_BUILD_ROOT/packages/"
        rm "$temp_package"
    fi

    if [ -d "$PHP_BUILD_ROOT/source/$DEFINITION" ]; then
        rm "$PHP_BUILD_ROOT/source/$DEFINITION" -rf
    fi

    mkdir "$PHP_BUILD_ROOT/source/$DEFINITION"

    tar -xj --strip-components 1 -f "$package_file" -C "$PHP_BUILD_ROOT/source/$DEFINITION"
    return $?
}

function list_definitions {
    for definition in "$PHP_BUILD_ROOT/definitions/"*; do
        echo $(basename "$definition")
    done
}

function install_package {
    local url=$1

    download $url
    build_package "$PHP_BUILD_ROOT/source/$DEFINITION"
}

function load_plugins {
    if [ ! -d "$1" ]; then
        return 1
    fi

    for plugin in "$1/"*.sh
    do
        source $plugin
        echo "Loaded $(basename $plugin .sh) Plugin."
    done
}

function build_package {
    local source_path=$1

    if [ ! -d "$PREFIX" ]; then
        mkdir "$PREFIX"
    fi

    configure_package "$source_path"

    make -C "$source_path" > /dev/null
    make -C "$source_path" install > /dev/null

    if [ -n "$PHP_DEFAULT_INI" ]; then
        if [ -f "$source_path/$PHP_DEFAULT_INI" ]; then
            echo "Using $PHP_DEFAULT_INI as php.ini"
            cp "$source_path/$PHP_DEFAULT_INI" "$PREFIX/etc/php.ini"
        else
            echo "$PHP_DEFAULT_INI not found in $source_path" >&2
        fi
    fi

    echo "Done."
}

# This function sets and unsets arguments for `configure`. Pass it
# the `-D` option to unset the argument given in `$2`. Otherwise
# the first argument is the name of the option and the second
# argument contains the optional value.
function configure_option {
    if [ "$1" = "-D" ]; then
        # This variable will contain the filtered arguments.
        local filtered=

        for option in $CONFIGURE_OPTIONS; do
            # If the argument starts with the given string in `$1`
            # then skip it from concatenation. Otherwise add it to
            # the filtered options.
            case "$option" in
                "$2"*) ;;
                *) filtered="$filtered $option";;
            esac
        done
        
        # Trim the leading whitespace added in the concatenation.
        filtered=$(echo "$filtered" | sed -e 's/[ ]*//')

        # Then replace the old argument list with the new one.
        CONFIGURE_OPTIONS="$filtered"
        return 0
    fi

    CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $1"

    if [ -n "$2" ]; then
        CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS=$2"
    fi
}

function configure_package {
    local source_path=$1
    local backup_pwd=$(pwd)

    local argv="$CONFIGURE_OPTIONS \
--with-config-file-path="$PREFIX/etc" \
--with-config-file-scan-dir="$PREFIX/etc/conf.d" \
--prefix=$PREFIX"

    cd "$source_path"

    if [ ! -d "$PREFIX/etc" ]; then
        mkdir "$PREFIX/etc"
    fi

    if [ ! -d "$PREFIX/etc/conf.d" ]; then
        mkdir "$PREFIX/etc/conf.d"
    fi

    if [ -d "/usr/lib64" ]; then
        argv="$argv --with-libdir=lib64"
    fi

    ./configure $argv > /dev/null

    cd "$backup_pwd"
}

# Here the magic begins.

# Set up the directories needed for the source
# and the downloaded packages.
init

# Display the Usage message if no arguments are given.
if [ -z $1 ]; then
    display_usage
    exit 1
fi

if [ "$1" = "--definitions" ]; then
    list_definitions
    exit 0
fi

# Check if the requested Definition exists.
if [ ! -f "$PHP_BUILD_ROOT/definitions/$DEFINITION" ]; then
    echo "Definition $DEFINITION not found." >&2
    exit $E_DEFINITION_NOT_FOUND
fi

# Load all definition plugins. Plugins register functions
# for use whithin definitions. See the xdebug and pyrus plugins for
# examples.
load_plugins "$PHP_BUILD_ROOT/plugins"

source "$PHP_BUILD_ROOT/definitions/$DEFINITION"
